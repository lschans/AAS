/*
 * HTTP Server for angular-server-with-sockets
 *
 * Description:  http server
 *-----------------------------------------------------
 * Author: Lars van der Schans
 * Email:  lars@wodanbrothers.com
 *-----------------------------------------------------
 */

var http = require('http'),
    config = {},
    log = {},
    socketio,
    http,
    httpServer = {},
    socketServer;

function socketTestData(request, response, callback) {
    if(typeof(request.data.command) !== 'undefined') {
        switch(request.data.command) {
            case 'config':
                if(typeof(request.data.subcommand) !== 'undefined'){
                    if(config.global.verbose == true) console.log('Sending data');
                    response.message.command = request.data.command;
                    response.message.subcommand = request.data.subcommand;
                    response.message.data = config[request.data.subcommand];
                }
                break;

            default :
                break;
        }
    }

    callback(request, response);
}

function socketReqRes(message, method, socket) {
    var request = {},
        response = {},
        reqTime = new Date();

    request.method = method;
    request.socket = socket;
    request.time = reqTime;


    response.message = {};
    response.end = function (request, response) {
        request.socket.emit(request.method, response.message);
    }

    // TODO: Exeption is parsing fails
    request.data = message;

    if(config.global.verbose == true) console.log(message);

    if(typeof(request.data.sessionID) !== 'undefined') {
        // Build request object
        // Call some middle ware
        socketTestData(request, response, function(request, response) {
            response.end(request, response);
        });
    } else {
        // Reject conenction
        // TODO: Disconnect here
    }
}

module.exports = function(server) {
    config = server.config;
    log = server.log,
    socketio = server.httpSocket;


    return {
        server : function(callback) {
            var x = 0;
            httpServer = http.createServer(function (request, response) {
                if(config.global.verbose == true) console.log('http -> ' + ++x);
                log.writeLog({domain: 'request', request: request});
                callback(request, response);
            });
            httpServer.timeout = 0;
            httpServer.listen(config.global.httpPort, 'localhost');

            log.writeLog({message: 'HTTP Server online', domain: 'server', port: config.global.httpPort});
            console.log('HTTP-Server started on port ' + config.global.httpPort + ' pid: ' + process.pid);

            // Some socket test stuff
            socketServer = socketio.listen(httpServer);
            // Connect the sockets to redis
            socketServer.adapter(server.redis({host: config.global.redisServer, port: config.global.redisPort}));
            
            socketServer.set('heartbeat interval'          , 25);
            socketServer.set('heartbeat timeout'           , 60);

            socketServer.set('transports', [
                'websocket',
                'flashsocket',
                'htmlfile',
                'xhr-polling',
                'jsonp-polling'
            ]);

            socketServer.on('connection', function (socket) {
                if(config.global.verbose == true) console.log('http socket connected to worker ' + process.pid);
                socket.on('message', function (msg) {
                    if(config.global.verbose == true) console.log('Message Received: ' + msg);
                    socket.broadcast.emit('message', process.pid + ' - ' + msg);
                });
                socket.on('admin', function (message) {
                    socketReqRes(message, 'admin', socket);
                });
            });

            return httpServer;
        }
    }
}