/*
 * Master process module
 *
 * Description:  This module will be included and executed when the master starts
 *-----------------------------------------------------
 * Author: Lars van der Schans
 * Email:  lars@wodanbrothers.com
 *-----------------------------------------------------
 */

var config = {},
    log = {},
    numCPUs = require('os').cpus().length;

module.exports = function(server, cluster) {
    config = server.config;
    log = server.log;

    return {
        execute : function () {
            server.cluster.workers = [];
            server.cluster.isMaster = true;
            server.cluster.isWorker = false;

            // Master code, all this code will be executed once
            if (config.global.verbose === true) console.log(numCPUs + ' CPU\'s detected.');

            console.log(server.helpers.dateCookieString(new Date().getTime()));

            // Fork workers.
            for (var i = 0; i < numCPUs; i++) {
                if (config.global.verbose === true) console.log('Forking worker process.');
                server.cluster.workers[i] = cluster.fork();
                server.cluster.workers[i].workerID = i;

                // Receive messages from this worker and handle them in the master process.
                server.cluster.workers[i].on('message', function(msg) {
                    server.helpers.processMessage(msg);
                });

                // Send a message from the master process to the worker.
                //server.cluster.workers[i].send({msgFromMaster: 'This is from master ' + process.pid + ' to worker ' + server.cluster.workers[i].pid + '.'});
            }

            // Restart workers must make button
            /*
            setTimeout(function () {
                for (var id in server.cluster.workers) {
                    var worker = server.cluster.workers[id];
                    worker.kill('SIGUSR2');
                }
            }, 2000);
            */

            cluster.on('online', function (worker) {
                // Do stuff when a worker comes online
                server.log.writeLog({message:'online', domain:'worker', pid:worker.process.pid});
                if (config.global.verbose === true) console.log("Worker " + worker.process.pid + " responded and is online");
            });

            cluster.on('exit', function (worker, code, signal) {
                // Do stuff when a worker exits or dies
                // TODO: Log exit code and message
                server.log.writeLog({message:'died', domain:'worker', pid:worker.process.pid});
                if (config.global.verbose === true) console.log('Worker ' + worker.process.pid + ' died');
                // Restart the worker
                server.cluster.workers[worker.workerID] = cluster.fork();
                server.cluster.workers[worker.workerID].workerID = worker.workerID;
                // Receive messages from this worker and handle them in the master process.
                server.cluster.workers[worker.workerID].on('message', function(msg) {
                    server.helpers.processMessage(msg);
                });
            });
        }
    }
}