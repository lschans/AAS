/*
 * Serve module
 *
 * Description:  This module actually serves the file to client after all other operations are done
 *-----------------------------------------------------
 * Author: Lars van der Schans
 * Email:  lars@wodanbrothers.com
 *-----------------------------------------------------
 */

var fs = require('fs'),
    url     = require('url'),
    path    = require('path'),
    config = {},
    log = {};

module.exports = function(server) {
    config = server.config;
    log = server.log;

    var serve = {
        serveFile : function(request, response, callback) {
            // Add server ID to headers
            /*
                TODO:
                 *  Read request url
                 *  Read request host
                 *  Split for port? ':'
                 *  Test if we are logged on and change root dirs
                 *  Test if we are mobile and change root dirs
                 *  See if file exists
                 *  See if we are allowed to serve the file
                 *  Send error if we cannot
                 *  See if file is binary and change the type to that
                 *  If plain text render @@ template vars
                 *  Serve file if we can
            */

            // request.headers.host + request.url
            // FULL-URL: localhost/test/php?lol
            // REQ-URL: /test/php?lol

            /*

                authentication and directory swapping

                if request url is directory append directory index from config

                file not found, search in public

                remove leading /

                add forbidden to serve

                add 500 and 404

             */



            // Clean the url
            var cleanUrl = request.url.split('?')[0].split(':')[0];

            // Switch between real root and login root
            if(request.session.data.user.uid !== 0) {
                var path = './admin/webroot';
            } else {
                var path = './admin/loginroot';
            }

            // If request.url is a directory add config.global.index to the end.
            if(cleanUrl.slice(-1) == '/') {
                cleanUrl += config.global.index;
            }

            if(fs.existsSync(path + cleanUrl)) {
                // Do nothing now the file exists
            } else if('./admin/public' + cleanUrl){
                // Change path to public
                path = './admin/public';
            } else {
                // We don't have the file
                response.status = 404;
            }

            // Break request url to pieces and make all ready be served
            var urlParts = cleanUrl.split('/'),
                requestFile = urlParts[urlParts.length -1],
                fileParts = requestFile.split('.'),
                extention = fileParts[fileParts.length -1],
                contentTypeHeader = config.fileTypes[extention];

            contentTypeHeader = contentTypeHeader.replace('@@_CHARSET_@@', response.charset);
            response.addResponseHeader(request, response, ['Content-Type', contentTypeHeader]);

            if(response.status == 200) {
                // Serve the file
                response.body = fs.readFileSync(path + cleanUrl);
            } else {
                // TODO: a nice error page thingy
                response.body = response.status + " - " + config.statusCodes[response.status].message;
            }

            // Nice smarty plugin here if file is text, but for now to make it work
            if(extention == 'html' || extention == 'css' || extention == 'js') {
                response.body = response.body.toString().replace('@@_LOGIN_MESSAGE_@@', config.auth.message);
            }

            console.logDefault(cleanUrl, response.status, contentTypeHeader);

            serve.write(request,response);

            if(typeof (callback) == 'function') callback(request, response);
            else return;
        },
        write : function (request, response) {
            // Add server name
            response.addResponseHeader(request, response, ['X-Powered-By', config.global['X-Powered-By']]);
            // Prepare the response and send to client
            response.prepareCookies(request, response, function(){
                response.headers
                response.writeHead(response.status, response.headers);
                response.write(response.body, response.encoding, 'binary');
                response.end();
            });
        }
    }
    return serve;
}