/*
 * Serve module
 *
 * Description:  This module actually serves the file to client after all other operations are done
 *-----------------------------------------------------
 * Author: Lars van der Schans
 * Email:  lars@wodanbrothers.com
 *-----------------------------------------------------
 */

var config = {},
    log = {};


function serveFile(filename,exists,request,response) {
    if (!exists) {
        if (server.config.verbose)
            console.log(server.config.logID + ' 404 ###\n\n');
        serve(
            response,
            server.config.errors['404'],
            404,
            server.config.errors.headers
        );
        return;
    }

    var contentType = path.extname(filename).slice(1);

    //Only serve specified file types
    if (!server.config.contentType) {
        if (server.config.verbose)
            console.log(server.config.logID + ' 415 ###\n\n');
        serve(
            response,
            server.config.errors['415'],
            415,
            server.config.errors.headers
        );
        return;
    }

    //default
    if (
        fs.statSync(filename).isDirectory()
    ) {
        filename += '/' + server.config.server.index;
    }

    //Do not allow access to restricted file types
    if (
        server.config.restrictedType[contentType]
    ) {
        if (server.config.verbose)
            console.log(server.config.logID + ' 403 ###\n\n');
        serve(
            response,
            server.config.errors['403'],
            403,
            server.config.errors.headers
        );
        return;
    }

    fs.readFile(
        filename,
        'binary',
        function (err, file) {
            if (err) {
                if (server.config.verbose)
                    console.log(server.config.logID + ' 500 ###\n\n', err, '\n\n');
                serve(
                    response,
                    server.config.errors['500'].replace(/\{\{err\}\}/g, err),
                    500,
                    server.config.errors.headers
                );
                return;
            }

            var headers = {
                'Content-Type': server.config.contentType[contentType],
                'Access-Control': 'Access-Control-Allow-Origin: *'
            }

            if (server.config.server.noCache)
                headers['Cache-Control'] = 'no-cache, no-store, must-revalidate';

            serve(
                response,
                smartyReplace(request, response, file),
                200,
                headers,
                'binary'
            );

            if (server.config.verbose)
                console.log(server.config.logID + ' 200 ###\n\n', headers, '\n\n');

            return;
        }
    );
}

module.exports = function(server) {
    config = server.config;
    log = server.log;

    return {
        serveFile : function(request, response, callback) {
            // Add server ID to headers
            response.addResponseHeader(request, response, ['X-Powered-By', config.global['X-Powered-By']]);

            if(typeof (callback) == 'function') callback(request, response);
            else return;
        }
    }
}