/*
 * Helper functions for angular-server-with-sockets
 *
 * Description:  A bundle with helper functions
 *-----------------------------------------------------
 * Author: Lars van der Schans
 * Email:  lars@wodanbrothers.com
 *-----------------------------------------------------
 */

var config = {};

module.exports = function(server) {
    config = server.config;

    return {
        randomString : function (bits) {
            var rand,i,ret;
            ret='';
            // Round bits to 6 char multiply
            if(bits < 6) {
                bits = 6;
            } else {
                bits -= bits%6;
            }

            // in v8, Math.random() yields 32 pseudo-random bits
            while(bits > 0) {
                rand = Math.floor(Math.random() * 0x100000000); // 32-bit integer
                // base 64 means 6 bits per character, so we use the top 30 bits from rand to give 30/6=5 characters.
                for (i = 26; i > 0 && bits > 0; i -= 6, bits -= 6) {
                    ret += config.helpers.randomChars[0x3F & rand >>> i];
                }
            }
            return ret;
        },
        pad : function (n){
            return n > 9 ? '' + n : '0' + n;
        },
        dateCookieString : function (ms){
            // from milliseconds since the epoch to Cookie 'expires' format which is Wdy, DD-Mon-YYYY HH:MM:SS GMT
            var d,wdy,mon;
            d = new Date(ms);
            wdy = config.helpers.weekdays;
            mon = config.helpers.months;
            return  wdy[d.getUTCDay()] + ', ' +
                this.pad(d.getUTCDate()) + '-' +
                mon[d.getUTCMonth()] + '-' +
                d.getUTCFullYear() + ' ' +
                this.pad(d.getUTCHours()) + ':' +
                this.pad(d.getUTCMinutes()) + ':' +
                this.pad(d.getUTCSeconds())+' GMT';
        },
        getDateTime : function(date) {
            date = date || new Date();

            var hour = date.getHours();
            hour = (hour < 10 ? "0" : "") + hour;

            var min = date.getMinutes();
            min = (min < 10 ? "0" : "") + min;

            var sec = date.getSeconds();
            sec = (sec < 10 ? "0" : "") + sec;

            var year = date.getFullYear();

            var month = date.getMonth() + 1;
            month = (month < 10 ? "0" : "") + month;

            var day = date.getDate();
            day = (day < 10 ? "0" : "") + day;

            return day + "-" + month + "-" + year + " " + hour + ":" + min + ":" + sec;
        },
        getDate : function(date) {
            date = date || new Date();

            var hour = date.getHours();
            hour = (hour < 10 ? "0" : "") + hour;

            var min = date.getMinutes();
            min = (min < 10 ? "0" : "") + min;

            var sec = date.getSeconds();
            sec = (sec < 10 ? "0" : "") + sec;

            var year = date.getFullYear();

            var month = date.getMonth() + 1;
            month = (month < 10 ? "0" : "") + month;

            var day = date.getDate();
            day = (day < 10 ? "0" : "") + day;

            return day + "-" + month + "-" + year;
        },
        getTime : function(date) {
            date = date || new Date();

            var hour = date.getHours();
            hour = (hour < 10 ? "0" : "") + hour;

            var min = date.getMinutes();
            min = (min < 10 ? "0" : "") + min;

            var sec = date.getSeconds();
            sec = (sec < 10 ? "0" : "") + sec;

            var year = date.getFullYear();

            var month = date.getMonth() + 1;
            month = (month < 10 ? "0" : "") + month;

            var day = date.getDate();
            day = (day < 10 ? "0" : "") + day;

            return hour + ":" + min + ":" + sec;
        },
        syncItter : function(request, response){
            // Function that iterates over a given array with callback functions
            var myFunction = response.funcArray.shift();
            if(response.funcArray.length > 0) {
                // It is a bit nasty referencing back to server, but 'this' doesn't work, good enough for this moment
                if(typeof (myFunction) === 'function') myFunction(request, response, server.helpers.syncItter);
            } else {
                delete response.funcArray;
                myFunction(request, response);
            }
        },
        syncIt : function(request, response, functionArray) {
            // Function that iterates over all callback functions in the function array
            response.funcArray = functionArray;
            this.syncItter(request, response);
        }
    };
}


