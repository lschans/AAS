/*
 * session manager for angular-server-with-sockets
 *
 * Description:  Session manager for 'angular server with sockets'
 *
 *-----------------------------------------------------
 * Author: Lars van der Schans
 * Email:  lars@wodanbrothers.com
 *-----------------------------------------------------
 */

var Fiber = require('fibers'),
    config = {},
    log = {};

module.exports = function(server) {
    config = server.config;
    log = server.log;

    sessions =  {
        setSession : function(request, response, callback) {
            var d = new Date(),
                r = response.randomString(32),
                sessionID = new Buffer(r + d).toString('base64').replace(/\=/g, '');

            Fiber(function() {
                var mongoSync = require("mongo-sync").Server,
                    mongoServer = new mongoSync(config.session.mongoHost),
                    database = mongoServer.db(config.session.database),
                    collection = database.getCollection(config.session.collection);
                request.session = {};
                request.session.data = {};
                var result = collection.update({ "sessionID":sessionID }, { $set: { "sessionID":sessionID, "ip":request.connection.remoteAddress, "dateTime":response.dateCookieString(d), "data":request.session.data}}, {upsert:true});
                    response.setCookie(request, response, ['X-Session-ID', sessionID]);
                    callback(request, response);
            }).run();
        },
        getSession : function(request, response, callback) {
            // Set session code here
            Fiber(function() {
                var mongoSync = require("mongo-sync").Server,
                    mongoServer = new mongoSync(config.session.mongoHost),
                    database = mongoServer.db(config.session.database),
                    collection = database.getCollection(config.session.collection);
                request.session = collection.findOne({"sessionID":request.cookies["X-Session-ID"]});
                callback(request, response);
            }).run();
        },
        setData : function (request, response, data, callback) {
            // Set data in session
            // data should be in the format of {'key':'myDataName', 'value':'my epic data'}
            request.session.data[data.key] = data.data;
            sessions.save(request, response, function(request, response){
                if(typeof(callback) == 'function') callback(request, response);
                else return;
            });
        },
        save : function (request, response, callback) {
            Fiber(function() {
                var mongoSync = require("mongo-sync").Server,
                    sessionID = request.session.sessionID;
                    mongoServer = new mongoSync(config.session.mongoHost),
                    database = mongoServer.db(config.session.database),
                    collection = database.getCollection(config.session.collection),
                    result = collection.update({ "sessionID":sessionID }, { $set: { "sessionID":sessionID, "ip":request.connection.remoteAddress, "data":request.session.data}}, {upsert:true});
                callback(request, response);
            }).run();
        },
        clearSession : function (request, response, callback) {
            // Clear a session
            Fiber(function() {
                var mongoSync = require("mongo-sync").Server,
                    mongoServer = new mongoSync(config.session.mongoHost),
                    database = mongoServer.db(config.session.database),
                    collection = database.getCollection(config.session.collection);
                collection.remove({"sessionID":request.cookies["X-Session-ID"]});
                request.session = {};
                callback(request, response);
            }).run();
        },
        initSession : function (request, response, callback) {
            // Initialize session
            request.session = {};
            if(typeof(request.cookies["X-Session-ID"]) !== 'undefined'){
                sessions.getSession(request, response, function(request, response){
                    callback(request, response);
                })
            } else {
                // set session
                sessions.setSession(request,response, function(request, response){
                    callback(request, response);
                })
            }

        }
    }
    return sessions;
}