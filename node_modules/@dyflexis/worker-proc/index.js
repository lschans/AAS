/*
 * Worker process module
 *
 * Description:  This module will be included and executed when a worker starts
 *-----------------------------------------------------
 * Author: Lars van der Schans
 * Email:  lars@wodanbrothers.com
 *-----------------------------------------------------
 */

var config = {},
    log = {},
    http, https, parseRequest, debugInfo, clientInfo;

module.exports = function(server, cluster) {
    config = server.config,
    log = server.log;

    return {
        execute : function () {
            // Threaded code, all this code will be executed for each thread
            server.cluster.isMaster = true;
            server.cluster.isWorker = false;

            var write = function (request, response) {
                response.writeHead(200, {'Content-Type': 'text/html'});
                response.write(response.body);
                response.end();
            }

            var forceHTTPS = function (request, response) {
                response.writeHead(302, {'Location': 'https://' + request.headers.host + request.url});
                response.end();
            }

            var respond = function (request, response) {
                // Clone array because we don't want to rommel with the master object
                var seqArr = sequences[request.method.toUpperCase()].slice(0);
                server.helpers.syncIt(
                    request,
                    response,
                    seqArr
                );
            }

            parseRequest = require('@dyflexis/parse-request')(server);
            debugInfo = require('@dyflexis/server-info')(server);
            clientInfo = require('@dyflexis/client-info')(server);
            http = require('@dyflexis/http-server')(server);

            if (config.global.useSPDY == true) {
                https = require('@dyflexis/spdy-server')(server);
            } else {
                https = require('@dyflexis/https-server')(server);
            }
            var sequences = {};
            sequences.POST = [
                clientInfo.getInfo,
                debugInfo.addForm,
                parseRequest.getPost,
                debugInfo.requestInfo,
                debugInfo.clientInfo,
                debugInfo.addConfig,
                write
            ];
            sequences.GET = [
                clientInfo.getInfo,
                debugInfo.addForm,
                parseRequest.getGet,
                debugInfo.requestInfo,
                debugInfo.clientInfo,
                debugInfo.addConfig,
                write
            ];
            sequences.PUT = [
                clientInfo.getInfo,
                debugInfo.addForm,
                parseRequest.getPost,
                parseRequest.getGet,
                debugInfo.requestInfo,
                debugInfo.clientInfo,
                write
            ];
            sequences.DELETE = [
                clientInfo.getInfo,
                debugInfo.addForm,
                parseRequest.getPost,
                parseRequest.getGet,
                debugInfo.requestInfo,
                debugInfo.clientInfo,
                write
            ];
            sequences.OPTIONS = [
                clientInfo.getInfo,
                debugInfo.addForm,
                parseRequest.getPost,
                parseRequest.getGet,
                debugInfo.requestInfo,
                debugInfo.clientInfo,
                write
            ];
            sequences.HEAD = [
                clientInfo.getInfo,
                debugInfo.addForm,
                parseRequest.getPost,
                parseRequest.getGet,
                debugInfo.addInfo,
                write
            ];
            sequences.TRACE = [
                clientInfo.getInfo,
                debugInfo.addForm,
                parseRequest.getPost,
                parseRequest.getGet,
                debugInfo.requestInfo,
                debugInfo.clientInfo,
                write
            ];
            sequences.CONNECT = [
                clientInfo.getInfo,
                debugInfo.addForm,
                parseRequest.getPost,
                parseRequest.getGet,
                debugInfo.requestInfo,
                debugInfo.clientInfo,
                write
            ];
            sequences.PATCH = [
                clientInfo.getInfo,
                debugInfo.addForm,
                parseRequest.getPost,
                parseRequest.getGet,
                debugInfo.addInfo,
                write
            ];
            sequences.UNDEFINED = [
                clientInfo.getInfo,
                debugInfo.addForm,
                parseRequest.getPost,
                parseRequest.getGet,
                debugInfo.requestInfo,
                debugInfo.clientInfo,
                debugInfo.addConfig,
                write
            ];

            if (server.config.global.forceHTTPS == true) {
                http.server(forceHTTPS);
            } else {
                http.server(respond);
            }

            https.server(respond);

            // Process shutdown for
            process.on('message', function (msg) {
                if (msg === 'shutdown') {
                    // initiate graceful close of any connections to server
                }
            });
        }
    }
}