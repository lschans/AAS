/*
 * Worker process module
 *
 * Description:  This module will be included and executed when a worker starts
 *-----------------------------------------------------
 * Author: Lars van der Schans
 * Email:  lars@wodanbrothers.com
 *-----------------------------------------------------
 */

var config = {},
    log = {},
    worker = {};

module.exports = function(server, cluster) {
    config = server.config,
    log = server.log;

    server.send = function (message) {
        process.send({msgFromWorker: 'PRC:' + process.pid + ';' + message})
    }

    worker.parseRequest = require('@dyflexis/parse-request')(server);
    worker.serverInfo = require('@dyflexis/server-info')(server);
    worker.clientInfo = require('@dyflexis/client-info')(server);
    worker.headers = require('@dyflexis/headers')(server);
    worker.cookies = require('@dyflexis/cookies')(server);
    worker.http = require('@dyflexis/http-server')(server);
    if (config.global.useSPDY == true) worker.https = require('@dyflexis/spdy-server')(server);
    else worker.https = require('@dyflexis/https-server')(server);
    worker.serve = require('@dyflexis/serve')(server);

    return {
        execute : function () {
            // Threaded code, all this code will be executed for each thread
            server.cluster.isMaster = true;
            server.cluster.isWorker = false;

            var write = function (request, response) {
                worker.headers.addResponseHeader(request, response, ['Content-Type', 'text/html; charset=' + response.charset]);
                worker.headers.addResponseHeader(request, response, ['X-Powered-By', config.global['X-Powered-By']]);

                worker.cookies.setCookie(request, response, ['X-Session-ID', 'UHG54D89BN34ES']);
                worker.cookies.setCookie(request, response, ['Test', 'Bla']);
                worker.cookies.setCookie(request, response, ['Test2', 'Bla']);
                worker.cookies.setCookie(request, response, ['Test3', 'Bla']);

                // Prepare the response and send to client
                worker.cookies.prepareCookies(request, response, function(){
                    response.headers
                    response.writeHead(response.status, response.headers);
                    response.write(response.body, response.encoding);
                    response.end();
                });
            }

            var forceHTTPS = function (request, response) {
                response.writeHead(302, {'Location': 'https://' + request.headers.host + request.url});
                response.end();
            }

            var respond = function (request, response) {
                response.headers = [];
                response.body = '';
                response.cookies = '';
                response.cookieArray = {};

                // Populate response object with shared functions
                response.addResponseHeader = worker.headers.addResponseHeader;
                response.setCookie = worker.cookies.setCookie;

                // Set default response and encoding
                response.status=200;
                response.encoding='utf8';
                response.charset='utf-8';

                // Clone array because we don't want to rommel with the master object
                var seqArr = sequences[request.method.toUpperCase()].slice(0);
                server.helpers.syncIt(
                    request,
                    response,
                    seqArr
                );
            }
            
            var sequences = {};
            sequences.POST = [
                worker.cookies.parseCookies,
                worker.clientInfo.getInfo,
                worker.serverInfo.addForm,
                worker.parseRequest.getPost,
                worker.parseRequest.getCommand,
                worker.serverInfo.requestInfo,
                worker.serverInfo.clientInfo,
                worker.serverInfo.addConfig,
                write
            ];
            sequences.GET = [
                worker.cookies.parseCookies,
                worker.clientInfo.getInfo,
                worker.serverInfo.addForm,
                worker.parseRequest.getGet,
                worker.serverInfo.requestInfo,
                worker.serverInfo.clientInfo,
                worker.serverInfo.addConfig,
                write
            ];
            sequences.PUT = [
                worker.clientInfo.getInfo,
                worker.serverInfo.addForm,
                worker.parseRequest.getPost,
                worker.parseRequest.getGet,
                worker.serverInfo.requestInfo,
                worker.serverInfo.clientInfo,
                write
            ];
            sequences.DELETE = [
                worker.cookies.parseCookies,
                worker.clientInfo.getInfo,
                worker.serverInfo.addForm,
                worker.parseRequest.getPost,
                worker.parseRequest.getGet,
                worker.serverInfo.requestInfo,
                worker.serverInfo.clientInfo,
                write
            ];
            sequences.OPTIONS = [
                worker.cookies.parseCookies,
                worker.clientInfo.getInfo,
                worker.serverInfo.addForm,
                worker.parseRequest.getPost,
                worker.parseRequest.getGet,
                worker.serverInfo.requestInfo,
                worker.serverInfo.clientInfo,
                write
            ];
            sequences.HEAD = [
                worker.cookies.parseCookies,
                worker.clientInfo.getInfo,
                worker.serverInfo.addForm,
                worker.parseRequest.getPost,
                worker.parseRequest.getGet,
                write
            ];
            sequences.TRACE = [
                worker.cookies.parseCookies,
                worker.clientInfo.getInfo,
                worker.serverInfo.addForm,
                worker.parseRequest.getPost,
                worker.parseRequest.getGet,
                worker.serverInfo.requestInfo,
                worker.serverInfo.clientInfo,
                write
            ];
            sequences.CONNECT = [
                worker.cookies.parseCookies,
                worker.clientInfo.getInfo,
                worker.serverInfo.addForm,
                worker.parseRequest.getPost,
                worker.parseRequest.getGet,
                worker.serverInfo.requestInfo,
                worker.serverInfo.clientInfo,
                write
            ];
            sequences.PATCH = [
                worker.cookies.parseCookies,
                worker.clientInfo.getInfo,
                worker.serverInfo.addForm,
                worker.parseRequest.getPost,
                worker.parseRequest.getGet,
                write
            ];
            sequences.UNDEFINED = [
                worker.cookies.parseCookies,
                worker.clientInfo.getInfo,
                worker.serverInfo.addForm,
                worker.parseRequest.getPost,
                worker.parseRequest.getGet,
                worker.serverInfo.requestInfo,
                worker.serverInfo.clientInfo,
                worker.serverInfo.addConfig,
                write
            ];

            if (server.config.global.forceHTTPS == true) {
                worker.http.server(forceHTTPS);
            } else {
                worker.http.server(respond);
            }

            worker.https.server(respond);

            // Send message to master process.
            //process.send({msgFromWorker: 'This is from worker ' + process.pid + '.'})

            // Receive messages from the master process.
            process.on('message', function(msg) {
                console.log('Worker ' + process.pid + ' received message from master.', msg);
            });

            // Process shutdown for
            process.on('message', function (msg) {
                if (msg === 'shutdown') {
                    // initiate graceful close of any connections to server
                }
            });
        }
    }
}